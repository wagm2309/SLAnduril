Este proyecto trata acerca de un solución logistica que ofrece servicios de envios.

PRIMERA ENTREGA
En esta primera pre-entrega se desarrollo la funcionalidad de solicitud de datos al clientes y el calculo de la cotización del envio.
Para las futuras entregas se desarrollara array con ciudades de origen y destino. Además del control de los datos tipo string ingresados, a fin de verificar si son validos # o no.
A futuro tambien se calculará la cotización en base a la distancia.

SEGUNDA ENTREGA
Este proyecto trata acerca de un solución logistica que ofrece servicios de envios.
En esta SEGUNDA PRE-ENTREGA se mejoró la funcionalidad de solicitar datos al cliente. Además tabajamos con arrays, metodo de busquedas en array, objeto de arrays y # #funciones de orden superior.
A futuro se comenzará a trabajar con el Front utilizando DOM. Se desarrollará un buscador de cotizaciones

TERCERA ENTREGA

- En esta tercera entrega se optimiza el HTML con el objetivo de implementar mejoras en el mismo. Utilizo como templete Bootstrap y lo modifico con CSS.
- Se aplica DOM para capturar elementos del HTML y para crear nodos, se eliminan los alerts. Se reciben los datos por medio del formulario, se construyen dos selectores de ciudades.
- Se aplica eventos a fin de evaluar los datos recibidos en el form. A futuro quiero agregar más validaciones a este formulario.
- Se separa el codigo en archivos para un mejor orden.
- Debo aclarar que el el archivo ../scripts/tools.js se está utilizando una función que genera números randoms que no se repitar, la cual fue desarrollada por el profesor. Hago
uso de esta función, acoplandola a mi poyecto.
- Se guardan las cotizaciones generadas en tabla que se modifica con DOM y luego se recuperan a fin de que persistan en esta tabla. 
- Hago uso de la libreria SweetAlert para el manejo de los mensajes que arroja la aplicación
- A futuro, se implementará un buscador de cotizaciones.


CUARTA ENTREGA (Entrega final)

* Se continua trabajando con la libreria Sweet Alert, para generar las alertas del sistema
* Se simula conexión a una API, aplicando Fetch con un archivo .json. Acá se trabaja con promesas, se aplica Then, Catch y Asyn.
* Por medio de esta simulacón de conexión a una API; se cargan los paises en los que el SL brinda servicios, en el main. Ademas en los selectores, se cargan estas ciudades por medios de un llamado en esta simulación de conexión a API.
* Se agrega nueva pagina en la que el usuario puede generar envíos
* Se constuyen buscadores para cotizaciones y para envíos
* Se mejora todo el codigo implementado
